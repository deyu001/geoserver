/*
*==Description==
*GeoServer is an open source software server written in Java that allows users
*          to share and edit geospatial data.Designed for interoperability,
*          it publishes data from any major spatial data source using open standards.
*
*Being a community-driven project, GeoServer is developed, tested, and supported by
*      a diverse group of individuals and organizations from around the world.
*
*GeoServer is the reference implementation of the Open Geospatial Consortium (OGC)
*          Web Feature Service (WFS) and Web Coverage Service (WCS) standards, as well as
*          a high performance certified compliant Web Map Service (WMS), compliant
*          Catalog Service for the Web (CSW) and implementing Web Processing Service (WPS).
*          GeoServer forms a core component of the Geospatial Web.
*
*==License==
*GeoServer is distributed under the GNU General Public License Version 2.0 license:
*
*    GeoServer, open geospatial information server
*    Copyright (C) 2014-2020 Open Source Geospatial Foundation.
*    Copyright (C) 2001-2014 OpenPlans
*
*    This program is free software; you can redistribute it and/or modify
*    it under the terms of the GNU General Public License as published by
*    the Free Software Foundation; either version 2 of the License, or
*    (at your option) any later version (collectively, "GPL").
*
*    As an exception to the terms of the GPL, you may copy, modify,
*    propagate, and distribute a work formed by combining GeoServer with the
*    EMF and XSD Libraries, or a work derivative of such a combination, even if
*    such copying, modification, propagation, or distribution would otherwise
*    violate the terms of the GPL. Nothing in this exception exempts you from
*    complying with the GPL in all respects for all of the code used other
*    than the EMF and XSD Libraries. You may include this exception and its grant
*    of permissions when you distribute GeoServer.  Inclusion of this notice
*    with such a distribution constitutes a grant of such permissions.  If
*    you do not wish to grant these permissions, remove this paragraph from
*    your distribution. "GeoServer" means the GeoServer software licensed
*    under version 2 or any later version of the GPL, or a work based on such
*    software and licensed under the GPL. "EMF and XSD Libraries" means
*    Eclipse Modeling Framework Project and XML Schema Definition software
*    distributed by the Eclipse Foundation, all licensed
*    under the Eclipse Public License Version 1.0 ("EPL"), or a work based on
*    such software and licensed under the EPL.
*
*    This program is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*    GNU General Public License for more details.
*
*    You should have received a copy of the GNU General Public License
*    along with this program; if not, write to the Free Software
*    Foundation, Inc., 51 Franklin Street, Suite 500, Boston, MA 02110-1335  USA
*
*==More Information==
*Visit the website or read the docs.
*/

package org.geoserver.wps.executor;

import java.util.Map;
import org.geoserver.threadlocals.ThreadLocalsTransfer;
import org.geoserver.wps.resource.WPSResourceManager;
import org.geotools.process.ProcessException;
import org.opengis.feature.type.Name;
import org.opengis.util.ProgressListener;

/**
 * Handles the execution of a certain class of processes. Implementations using thread pools should
 * take care of transferring the thread locals inside the thread pool leveraging the {@link
 * ThreadLocalsTransfer} class.
 *
 * @author Andrea Aime - GeoSolutions
 */
public interface ProcessManager {

    /** If this process manager can handle the submission */
    boolean canHandle(Name processName);

    /**
     * Synchronous submission, returns the process outputs. GeoServer will use this call only to run
     * nested processes in a process chain, do not use a thread pool for this one as this will
     * result in a deadlock in case there are enough parallel requests with chained processes (which
     * will result in each request taking more than one execution thread, which are limited, one of
     * the common causes for deadlock) <br>
     * It is responsibility of the implementor to call {@link
     * WPSResourceManager#setCurrentExecutionId(String)} from within the thread that is evaluating
     * the inputs and executing the process to ensure proper temporary resource handling (some
     * inputs will parse during execution and require temporary storage, same goes for certain
     * processes in need to use temporary files)
     *
     * @param executionId The unique identifier generated by GeoServer for this execution
     * @param processName The name of the process
     * @param inputs The process inputs
     * @param listener The progress listener, that the process will use to report about its
     *     progress, and check for cancellation
     * @return The results
     */
    Map<String, Object> submitChained(
            String executionId,
            Name processName,
            Map<String, Object> inputs,
            ProgressListener listener)
            throws ProcessException;

    /**
     * Asynchronous submission, not blocking. The process outputs can be retrieved using {@link
     * #getOutput(String, long)}. <br>
     * It is responsibility of the implementor to call {@link
     * WPSResourceManager#setCurrentExecutionId(String)} from within the thread that is evaluating
     * the inputs and executing the process to ensure proper temporary resource handling (some
     * inputs will parse during execution and require temporary storage, same goes for certain
     * processes in need to use temporary files)
     *
     * @param processName The name of the process
     * @param inputs The process inputs
     * @param listener The progress listener, that the process will use to report about its
     *     progress, and check for cancellation
     * @param background Whether this submission is for a background process (that can run at a
     *     lower pace) or a foreground one. This is used to differentiate between a synchronous WPS
     *     request, that has a time sensitive HTTP connection associated to it, and a asynchronous
     *     one, in which the client will poll the server for updates
     */
    void submit(
            String executionId,
            Name processName,
            Map<String, Object> inputs,
            ProgressListener listener,
            boolean background)
            throws ProcessException;

    /**
     * Gets the process output. Will block the caller for at most "timeout" if the process execution
     * is not complete. Once the output is retrieved the process will be marked as terminated and it
     * won't be possible to get its outputs or status anymore.
     */
    Map<String, Object> getOutput(String executionId, long timeout) throws ProcessException;

    /**
     * Attempts to cancel the process execution. If the process is queued for execution it will be
     * removed from the queue, if it's still running a best effort attempt to stop the process will
     * be made.
     */
    void cancel(String executionId);
}
