/*
*==Description==
*GeoServer is an open source software server written in Java that allows users
*          to share and edit geospatial data.Designed for interoperability,
*          it publishes data from any major spatial data source using open standards.
*
*Being a community-driven project, GeoServer is developed, tested, and supported by
*      a diverse group of individuals and organizations from around the world.
*
*GeoServer is the reference implementation of the Open Geospatial Consortium (OGC)
*          Web Feature Service (WFS) and Web Coverage Service (WCS) standards, as well as
*          a high performance certified compliant Web Map Service (WMS), compliant
*          Catalog Service for the Web (CSW) and implementing Web Processing Service (WPS).
*          GeoServer forms a core component of the Geospatial Web.
*
*==License==
*GeoServer is distributed under the GNU General Public License Version 2.0 license:
*
*    GeoServer, open geospatial information server
*    Copyright (C) 2014-2020 Open Source Geospatial Foundation.
*    Copyright (C) 2001-2014 OpenPlans
*
*    This program is free software; you can redistribute it and/or modify
*    it under the terms of the GNU General Public License as published by
*    the Free Software Foundation; either version 2 of the License, or
*    (at your option) any later version (collectively, "GPL").
*
*    As an exception to the terms of the GPL, you may copy, modify,
*    propagate, and distribute a work formed by combining GeoServer with the
*    EMF and XSD Libraries, or a work derivative of such a combination, even if
*    such copying, modification, propagation, or distribution would otherwise
*    violate the terms of the GPL. Nothing in this exception exempts you from
*    complying with the GPL in all respects for all of the code used other
*    than the EMF and XSD Libraries. You may include this exception and its grant
*    of permissions when you distribute GeoServer.  Inclusion of this notice
*    with such a distribution constitutes a grant of such permissions.  If
*    you do not wish to grant these permissions, remove this paragraph from
*    your distribution. "GeoServer" means the GeoServer software licensed
*    under version 2 or any later version of the GPL, or a work based on such
*    software and licensed under the GPL. "EMF and XSD Libraries" means
*    Eclipse Modeling Framework Project and XML Schema Definition software
*    distributed by the Eclipse Foundation, all licensed
*    under the Eclipse Public License Version 1.0 ("EPL"), or a work based on
*    such software and licensed under the EPL.
*
*    This program is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*    GNU General Public License for more details.
*
*    You should have received a copy of the GNU General Public License
*    along with this program; if not, write to the Free Software
*    Foundation, Inc., 51 Franklin Street, Suite 500, Boston, MA 02110-1335  USA
*
*==More Information==
*Visit the website or read the docs.
*/

package org.geoserver.community.css.web;

import static org.junit.Assert.assertEquals;

import java.io.File;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.geoserver.catalog.Catalog;
import org.geoserver.catalog.StyleInfo;
import org.geoserver.catalog.Styles;
import org.geoserver.data.test.SystemTestData;
import org.geoserver.web.GeoServerWicketTestSupport;
import org.geoserver.wms.web.data.StyleEditPage;
import org.junit.Before;
import org.junit.Test;

/**
 * Tests for recovering CSS styles generated by the old (pre-pluggable styles) CSS extension. That
 * extension extension output styles based on generated SLD files, without saving a reference to the
 * user's CSS input, and as a result the new style editor treats them as SLD.
 */
public class StyleEditCssRecoveryTest extends GeoServerWicketTestSupport {

    String oldCssStyle = "OldCssStyle";

    String oldCssStyleWithFormatSLD = "OldCssStyle_Format_Set_To_SLD";

    String oldCssStyleWithSLDManuallyEdited = "OldCssStyle_SLD_Manually_Edited";

    Catalog catalog;

    protected void setUpTestData(SystemTestData testData) throws Exception {
        super.setUpTestData(testData);
        // System.out.println("setUpTestData()");

        Date t0 = new Date(1483228800000L); // Midnight Jan 1, 2017 UTC
        List<String> testStyleNames =
                Arrays.asList(
                        oldCssStyle, oldCssStyleWithFormatSLD, oldCssStyleWithSLDManuallyEdited);

        for (String styleName : testStyleNames) {
            for (String ext : Arrays.asList(".css", ".sld", ".xml")) {
                testData.copyTo(
                        this.getClass().getResourceAsStream(styleName + ext),
                        "styles/" + styleName + ext);
                File f =
                        Paths.get(
                                        testData.getDataDirectoryRoot().getAbsolutePath(),
                                        "styles/" + styleName + ext)
                                .toFile();
                f.setLastModified(t0.getTime());
            }
        }

        // Make this SLD file appear as if it was edited after being generated from CSS.
        File manuallyEditedSld =
                Paths.get(
                                testData.getDataDirectoryRoot().getAbsolutePath(),
                                "styles/" + oldCssStyleWithSLDManuallyEdited + ".sld")
                        .toFile();
        manuallyEditedSld.setLastModified(t0.getTime() + 1000000L);
    }

    @Override
    protected void onSetUp(SystemTestData testData) throws Exception {
        super.onSetUp(testData);
    }

    @Before
    public void setUp() throws Exception {
        login();
        catalog = getCatalog();
    }

    /**
     * Test recovery of a CSS Style generated by the old CSS Extension, when the StyleInfo has no
     * declared <format> and its filename points to a derived SLD.
     */
    @Test
    public void testRecoverLostCssStyle() throws Exception {
        StyleInfo styleInfo = catalog.getStyleByName(oldCssStyle);
        StyleEditPage edit = new StyleEditPage(styleInfo);

        tester.startPage(edit);
        tester.assertRenderedPage(StyleEditPage.class);
        tester.assertNoErrorMessage();

        // Assert that the page displays the format as css
        tester.assertModelValue("styleForm:context:panel:format", "css");

        // Assert that the editor text area contains css
        String editorContents =
                (String)
                        tester.getComponentFromLastRenderedPage(
                                        "styleForm:styleEditor:editorContainer:editorParent:editor")
                                .getDefaultModelObject();
        Styles.handler("css").parse(editorContents, null, null, null);

        // Assert that the catalog's StyleInfo is now a css style
        StyleInfo si = catalog.getStyleByName(oldCssStyle);
        assertEquals("css", si.getFormat());
        assertEquals(oldCssStyle + ".css", si.getFilename());
    }

    /**
     * Test recovery of a CSS Style generated by the old CSS Extension, when the StyleInfo declares
     * <format>sld</format> and its filename points to a derived SLD.
     */
    @Test
    public void testRecoverLostCssStyleWithFormatSetToSLD() throws Exception {
        StyleInfo styleInfo = catalog.getStyleByName(oldCssStyleWithFormatSLD);
        StyleEditPage edit = new StyleEditPage(styleInfo);

        tester.startPage(edit);
        tester.assertRenderedPage(StyleEditPage.class);
        tester.assertNoErrorMessage();

        // Assert that the page displays the format as css
        tester.assertModelValue("styleForm:context:panel:format", "css");

        // Assert that the editor text area contains css
        String editorContents =
                (String)
                        tester.getComponentFromLastRenderedPage(
                                        "styleForm:styleEditor:editorContainer:editorParent:editor")
                                .getDefaultModelObject();
        Styles.handler("css").parse(editorContents, null, null, null);

        // Assert that the catalog's StyleInfo is now a css style
        StyleInfo si = catalog.getStyleByName(oldCssStyleWithFormatSLD);
        assertEquals("css", si.getFormat());
        assertEquals(oldCssStyleWithFormatSLD + ".css", si.getFilename());
    }

    /**
     * Test that the recovery code does not overwrite generated SLD styles if they were subsequently
     * edited.
     */
    @Test
    public void testIgnoreCssStyleIfSLDWasEdited() throws Exception {
        StyleInfo styleInfo = catalog.getStyleByName(oldCssStyleWithSLDManuallyEdited);
        StyleEditPage edit = new StyleEditPage(styleInfo);

        tester.startPage(edit);
        tester.assertRenderedPage(StyleEditPage.class);
        tester.assertNoErrorMessage();

        // Assert that the page displays the format as SLD
        tester.assertModelValue("styleForm:context:panel:format", "sld");

        // Assert that the editor text area contains SLD
        String editorContents =
                (String)
                        tester.getComponentFromLastRenderedPage(
                                        "styleForm:styleEditor:editorContainer:editorParent:editor")
                                .getDefaultModelObject();
        Styles.handler("sld").parse(editorContents, null, null, null);

        // Assert that the catalog's StyleInfo is still a SLD style
        StyleInfo si = catalog.getStyleByName(oldCssStyleWithSLDManuallyEdited);
        assertEquals("sld", si.getFormat());
        assertEquals(oldCssStyleWithSLDManuallyEdited + ".sld", si.getFilename());
    }
}
