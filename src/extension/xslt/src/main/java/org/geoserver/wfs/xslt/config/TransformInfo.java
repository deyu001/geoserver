/*
*==Description==
*GeoServer is an open source software server written in Java that allows users
*          to share and edit geospatial data.Designed for interoperability,
*          it publishes data from any major spatial data source using open standards.
*
*Being a community-driven project, GeoServer is developed, tested, and supported by
*      a diverse group of individuals and organizations from around the world.
*
*GeoServer is the reference implementation of the Open Geospatial Consortium (OGC)
*          Web Feature Service (WFS) and Web Coverage Service (WCS) standards, as well as
*          a high performance certified compliant Web Map Service (WMS), compliant
*          Catalog Service for the Web (CSW) and implementing Web Processing Service (WPS).
*          GeoServer forms a core component of the Geospatial Web.
*
*==License==
*GeoServer is distributed under the GNU General Public License Version 2.0 license:
*
*    GeoServer, open geospatial information server
*    Copyright (C) 2014-2020 Open Source Geospatial Foundation.
*    Copyright (C) 2001-2014 OpenPlans
*
*    This program is free software; you can redistribute it and/or modify
*    it under the terms of the GNU General Public License as published by
*    the Free Software Foundation; either version 2 of the License, or
*    (at your option) any later version (collectively, "GPL").
*
*    As an exception to the terms of the GPL, you may copy, modify,
*    propagate, and distribute a work formed by combining GeoServer with the
*    EMF and XSD Libraries, or a work derivative of such a combination, even if
*    such copying, modification, propagation, or distribution would otherwise
*    violate the terms of the GPL. Nothing in this exception exempts you from
*    complying with the GPL in all respects for all of the code used other
*    than the EMF and XSD Libraries. You may include this exception and its grant
*    of permissions when you distribute GeoServer.  Inclusion of this notice
*    with such a distribution constitutes a grant of such permissions.  If
*    you do not wish to grant these permissions, remove this paragraph from
*    your distribution. "GeoServer" means the GeoServer software licensed
*    under version 2 or any later version of the GPL, or a work based on such
*    software and licensed under the GPL. "EMF and XSD Libraries" means
*    Eclipse Modeling Framework Project and XML Schema Definition software
*    distributed by the Eclipse Foundation, all licensed
*    under the Eclipse Public License Version 1.0 ("EPL"), or a work based on
*    such software and licensed under the EPL.
*
*    This program is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*    GNU General Public License for more details.
*
*    You should have received a copy of the GNU General Public License
*    along with this program; if not, write to the Free Software
*    Foundation, Inc., 51 Franklin Street, Suite 500, Boston, MA 02110-1335  USA
*
*==More Information==
*Visit the website or read the docs.
*/

package org.geoserver.wfs.xslt.config;

import org.geoserver.catalog.FeatureTypeInfo;

/**
 * Stores the configuration of one XSLT transformation
 *
 * @author Andrea Aime - GeoSolutions
 */
public class TransformInfo {

    String name;

    String sourceFormat;

    String outputFormat;

    String outputMimeType;

    String fileExtension;

    String xslt;

    FeatureTypeInfo featureType;

    public TransformInfo() {}

    public TransformInfo(TransformInfo other) {
        this.name = other.name;
        this.sourceFormat = other.sourceFormat;
        this.outputFormat = other.outputFormat;
        this.fileExtension = other.fileExtension;
        this.xslt = other.xslt;
        this.featureType = other.featureType;
    }

    /** The transform name (same as the file used to persist the transform configuration) */
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    /**
     * The source format/mime type that the XLST transformation uses as the origin. Must be a form
     * of XML.
     */
    public String getSourceFormat() {
        return sourceFormat;
    }

    public void setSourceFormat(String sourceFormat) {
        this.sourceFormat = sourceFormat;
    }

    /**
     * The mime type of the file generated by the XLST transformation. Normally it's some sort of
     * text file
     */
    public String getOutputFormat() {
        return outputFormat;
    }

    public void setOutputFormat(String outputFormat) {
        this.outputFormat = outputFormat;
    }

    /**
     * The extension of the file generated by the XSLT transformation (will be used in the HTTP
     * headers of the response)
     */
    public String getFileExtension() {
        return fileExtension;
    }

    public void setFileExtension(String fileExtension) {
        this.fileExtension = fileExtension;
    }

    /** The XLST file name */
    public String getXslt() {
        return xslt;
    }

    public void setXslt(String fileName) {
        this.xslt = fileName;
    }

    /**
     * The eventual specific feature type the XSLT is designed to run against (in this case the
     * sheet will reference specific attributes of the layer)
     */
    public FeatureTypeInfo getFeatureType() {
        return featureType;
    }

    public void setFeatureType(FeatureTypeInfo featureType) {
        this.featureType = featureType;
    }

    public String mimeType() {
        if (outputMimeType != null) {
            return outputMimeType;
        } else {
            return outputFormat;
        }
    }

    /** Returns the output mime type */
    public String getOutputMimeType() {
        return outputMimeType;
    }

    public void setOutputMimeType(String outputMime) {
        this.outputMimeType = outputMime;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((featureType == null) ? 0 : featureType.hashCode());
        result = prime * result + ((fileExtension == null) ? 0 : fileExtension.hashCode());
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        result = prime * result + ((outputFormat == null) ? 0 : outputFormat.hashCode());
        result = prime * result + ((outputMimeType == null) ? 0 : outputMimeType.hashCode());
        result = prime * result + ((sourceFormat == null) ? 0 : sourceFormat.hashCode());
        result = prime * result + ((xslt == null) ? 0 : xslt.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;
        TransformInfo other = (TransformInfo) obj;
        if (featureType == null) {
            if (other.featureType != null) return false;
        } else if (!featureType.equals(other.featureType)) return false;
        if (fileExtension == null) {
            if (other.fileExtension != null) return false;
        } else if (!fileExtension.equals(other.fileExtension)) return false;
        if (name == null) {
            if (other.name != null) return false;
        } else if (!name.equals(other.name)) return false;
        if (outputFormat == null) {
            if (other.outputFormat != null) return false;
        } else if (!outputFormat.equals(other.outputFormat)) return false;
        if (outputMimeType == null) {
            if (other.outputMimeType != null) return false;
        } else if (!outputMimeType.equals(other.outputMimeType)) return false;
        if (sourceFormat == null) {
            if (other.sourceFormat != null) return false;
        } else if (!sourceFormat.equals(other.sourceFormat)) return false;
        if (xslt == null) {
            if (other.xslt != null) return false;
        } else if (!xslt.equals(other.xslt)) return false;
        return true;
    }

    @Override
    public String toString() {
        return "TransformInfo [name="
                + name
                + ", sourceFormat="
                + sourceFormat
                + ", outputFormat="
                + outputFormat
                + ", outputMimeType="
                + outputMimeType
                + ", fileExtension="
                + fileExtension
                + ", xslt="
                + xslt
                + ", featureType="
                + featureType
                + "]";
    }
}
